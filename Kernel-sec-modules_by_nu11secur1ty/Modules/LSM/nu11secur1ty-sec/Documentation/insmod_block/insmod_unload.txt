
# Before installing the new kernel and after compiling him:

- Suppose you want to install the kernel header file to /usr/src/linux-headers-4.15.3. The compiled kernel source tree is located 

```bash
/path/to/compiled/linux-5.x.x/
```
1. unpack a clean kernel source tree
```bash
tar xvf linux-5.x.x.tar.xz
cd linux-5.x.x/
```
2.  copy you .config file to the directory
```bash
cp /path/to/compiled/linux-5.x.x/.config .
```
3.  run it and then delete .config file in source directory to get a clean kernel source
```bash
make O=/usr/src/linux-headers-5.x.x oldconfig
rm .config
```
4. run the modules_prepare make target
```bash
make O=/usr/src/linux-headers-5.x.x modules_prepare
```
5.  delete useless things, and copy the necessary things
```bash
rm /usr/src/linux-headers-5.x.x/source
cp /path/to/compiled/linux-5.x.x/Module.symvers /usr/src/linux-headers-5.x.x
```
-----------------------------------------------------------------------------------
Now, the /usr/src/linux-headers-5.x.x directory is able to build the module.

Documentation https://www.kernel.org/doc/Documentation/kbuild/modules.txt tell us modules_prepare

This will make sure the kernel contains the information required. The target exists solely as a simple way to prepare a kernel source tree for building external modules.

`NOTE`: "modules_prepare" will not build Module.symvers even if CONFIG_MODVERSIONS is set; therefore, a full kernel build needs to be executed to make module versioning work.

-----------------------------------------------------------------------------------

rpm -aq | grep kernel
           - remove all old kernel packages and kernel resources
     
zypper remove kernel-devel
           - remove the development tools + old kernel headers
           
# Installing the new kernel
 - going to your compiling directory

      cd /usr/src/packages/RPMS/x86_64
 
 - Install all packages on that directory
      
       rpm -Uvh kernel-5.3.5_nu11secur1ty_lp151.28.20_default-1.x86_64.rpm
       rpm -Uvh kernel-devel-5.3.5_nu11secur1ty_lp151.28.20_default-1.x86_64.rpm
       rpm -Uvh kernel-headers-5.3.5_nu11secur1ty_lp151.28.20_default-1.x86_64.rpm
       
  - going to your source directory
  
      cd cd /usr/src/packages/SRPMS
      
  - install the source tree
   
       rpm -Uvh kernel-5.3.5_nu11secur1ty_lp151.28.20_default-1.src.rpm
  
  - RECOMMENDED: Installing the patch 
   
      curl -s https://raw.githubusercontent.com/nu11secur1ty/Linux_hardening_and_security/master/Kernel-sec-modules_by_nu11secur1ty/Secur1ty-Patches-by-nu11secur1ty/insblpatch/inblpatchmod.sh | bash 
   
  - UNLOAD PATCH MODULE:
  
      curl -s https://raw.githubusercontent.com/nu11secur1ty/Linux_hardening_and_security/master/Kernel-sec-modules_by_nu11secur1ty/Secur1ty-Patches-by-nu11secur1ty/insblpatch/unload/insmod_unload.sh | bash      
      
  - Prepire for booting of your new sec kernel ;)
      
      grub2-mkconfig -o /boot/grub2/grub.cfg
      telinit 6
      
      
  =========================================================================
  WARNING: Once you install the patch for the security module insmod_block, you will not load LKM modules anymore! 
  Of course, this is not forever, if someone wants to unload the patch, 
  please visit the https://www.nu11secur1ty.com/ page, for more information, 
  write to me on mail-form for contacts. BR @nu11secur1ty
  
  # V.Varbanovski System Administrator - Infrastructure - Architect
       
